{
  "info": {
    "name": "Task App API",
    "description": "Complete API collection for the Task App Express.js server with Clean Architecture. This collection matches the E2E test suite and includes all CRUD operations for todos with comprehensive test scenarios including happy paths and validation errors.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "Base URL for the Task App API server"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID from create operations"
    }
  ],
  "item": [
    {
      "name": "Server Info & Health",
      "description": "Basic server information and health check endpoints",
      "item": [
        {
          "name": "Get Server Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Task App API Server');",
                  "    pm.expect(responseJson).to.have.property('version', '1.0.0');",
                  "    pm.expect(responseJson).to.have.property('environment', 'development');",
                  "    pm.expect(responseJson).to.have.property('database', 'mysql');",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});",
                  "",
                  "pm.test('Endpoints object has required endpoints', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.endpoints).to.have.property('health', '/api/health');",
                  "    pm.expect(responseJson.endpoints).to.have.property('todos', '/api/todos');",
                  "    pm.expect(responseJson.endpoints).to.have.property('documentation');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"]
            },
            "description": "Get basic server information including version, environment, and available endpoints"
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Server is running');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Timestamp is valid ISO string', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Health check endpoint to verify server is running"
          }
        }
      ]
    },
    {
      "name": "Todos - Create Operations",
      "description": "POST operations for creating new todos with validation scenarios",
      "item": [
        {
          "name": "Create Todo - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title', 'Complete project documentation');",
                  "    pm.expect(todo).to.have.property('completed', false);",
                  "    pm.expect(todo).to.have.property('priority', 'high');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Todo ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.id).to.be.a('string');",
                  "    pm.expect(todo.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('todoId', todo.id);",
                  "});",
                  "",
                  "pm.test('Timestamps are valid ISO strings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "    pm.expect(todo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Create a new todo with required fields"
          }
        },
        {
          "name": "Create Todo - Missing Title (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details have correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details).to.have.property('message');",
                  "    pm.expect(responseJson.details).to.have.property('issues');",
                  "    pm.expect(responseJson.details).to.have.property('fieldErrors');",
                  "    pm.expect(responseJson.details.issues).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Error details indicate title is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const titleError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('title'));",
                  "    pm.expect(titleError).to.exist;",
                  "    pm.expect(titleError.code).to.equal('invalid_type');",
                  "    pm.expect(titleError.message).to.include('expected string, received undefined');",
                  "    ",
                  "    // Test fieldErrors structure",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('title');",
                  "    pm.expect(responseJson.details.fieldErrors.title).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.title.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test validation error when title is missing"
          }
        },
        {
          "name": "Create Todo - Title Too Short (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details have correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details).to.have.property('message');",
                  "    pm.expect(responseJson.details).to.have.property('issues');",
                  "    pm.expect(responseJson.details).to.have.property('fieldErrors');",
                  "    pm.expect(responseJson.details.issues).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Error details indicate title too short', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const titleError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('title'));",
                  "    pm.expect(titleError).to.exist;",
                  "    pm.expect(titleError.code).to.equal('too_small');",
                  "    pm.expect(titleError.message).to.equal('Title must be at least 2 characters');",
                  "    ",
                  "    // Test fieldErrors structure",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('title');",
                  "    pm.expect(responseJson.details.fieldErrors.title).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.title[0]).to.equal('Title must be at least 2 characters');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"x\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test validation error when title is too short (less than 2 characters)"
          }
        }
      ]
    },
    {
      "name": "Todos - Read Operations",
      "description": "GET operations for retrieving todos with various filters",
      "item": [
        {
          "name": "Get All Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Todo items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const todo = responseJson.data[0];",
                  "        pm.expect(todo).to.have.property('id');",
                  "        pm.expect(todo).to.have.property('title');",
                  "        pm.expect(todo).to.have.property('completed');",
                  "        pm.expect(todo).to.have.property('priority');",
                  "        pm.expect(todo).to.have.property('createdAt');",
                  "        pm.expect(todo).to.have.property('updatedAt');",
                  "        pm.expect(todo.completed).to.be.a('boolean');",
                  "        pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Retrieve all todos regardless of completion status"
          }
        },
        {
          "name": "Get Todo by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title');",
                  "    pm.expect(todo).to.have.property('completed');",
                  "    pm.expect(todo).to.have.property('priority');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "    pm.expect(todo.completed).to.be.a('boolean');",
                  "    pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Retrieve a specific todo by its ID (uses todoId from Create Todo request)"
          }
        },
        {
          "name": "Get Todo by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'TODO_NOT_FOUND');",
                  "});",
                  "",
                  "pm.test('Error message indicates todo not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/nonexistent-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "nonexistent-id"]
            },
            "description": "Test error handling when requesting a todo that doesn't exist"
          }
        },
        {
          "name": "Get Active Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are active (not completed)', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.false;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "active"]
            },
            "description": "Retrieve only active (not completed) todos"
          }
        },
        {
          "name": "Get Completed Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are completed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.true;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/completed",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "completed"]
            },
            "description": "Retrieve only completed todos"
          }
        },
        {
          "name": "Get Todo Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats).to.have.property('active');",
                  "    pm.expect(stats).to.have.property('completed');",
                  "    pm.expect(stats).to.have.property('overdue');",
                  "    pm.expect(stats).to.have.property('highPriority');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.active).to.be.a('number');",
                  "    pm.expect(stats.completed).to.be.a('number');",
                  "    pm.expect(stats.overdue).to.be.a('number');",
                  "    pm.expect(stats.highPriority).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Statistics are mathematically consistent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats.total).to.equal(stats.active + stats.completed);",
                  "    pm.expect(stats.active).to.be.at.least(0);",
                  "    pm.expect(stats.completed).to.be.at.least(0);",
                  "    pm.expect(stats.overdue).to.be.at.least(0);",
                  "    pm.expect(stats.highPriority).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "stats"]
            },
            "description": "Get statistics about todos including total, active, completed, overdue, and high priority counts"
          }
        }
      ]
    },
    {
      "name": "Todos - Update Operations",
      "description": "PUT and PATCH operations for updating todos",
      "item": [
        {
          "name": "Update Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo updated successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated todo title\",\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Update a todo with new values"
          }
        },
        {
          "name": "Toggle Todo Completion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo toggled successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}/toggle",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}", "toggle"]
            },
            "description": "Toggle the completion status of a todo"
          }
        },
        {
          "name": "Toggle Non-existent Todo - Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'TODO_NOT_FOUND');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/nonexistent-id/toggle",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "nonexistent-id", "toggle"]
            },
            "description": "Test error handling when toggling a non-existent todo"
          }
        }
      ]
    },
    {
      "name": "Todos - Delete Operations",
      "description": "DELETE operations for removing todos",
      "item": [
        {
          "name": "Delete Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo deleted successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Delete a todo by its ID"
          }
        },
        {
          "name": "Delete Non-existent Todo - Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'TODO_NOT_FOUND');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/nonexistent-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "nonexistent-id"]
            },
            "description": "Test error handling when deleting a non-existent todo"
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "description": "Various error scenarios and edge cases",
      "item": [
        {
          "name": "Unknown Route - 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/unknown-route",
              "host": ["{{baseUrl}}"],
              "path": ["api", "unknown-route"]
            },
            "description": "Test 404 error for unknown routes"
          }
        },
        {
          "name": "Invalid JSON - 400",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"title\": \"test\", invalid json }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test error handling for invalid JSON in request body"
          }
        }
      ]
    }
  ]
}
