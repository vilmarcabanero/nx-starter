name: üì¶ Dependency Update Task
description: Update project dependencies to latest versions or fix security vulnerabilities
title: "[DEPS] Update dependencies - [SCOPE]"
labels: ["dependencies", "maintenance", "security", "copilot"]
assignees: ["copilot"]
body:
  - type: dropdown
    id: update-scope
    attributes:
      label: Update Scope
      description: What type of dependency updates are needed?
      options:
        - Major Updates - Breaking changes requiring code updates
        - Minor Updates - Feature updates with backward compatibility
        - Patch Updates - Bug fixes and security patches
        - Security Updates - Critical security vulnerability fixes
        - Specific Package - Update specific package(s)
        - Full Audit - Complete dependency audit and updates
      default: 5
    validations:
      required: true

  - type: dropdown
    id: urgency
    attributes:
      label: Update Urgency
      description: How urgent are these dependency updates?
      options:
        - Critical - Security vulnerabilities requiring immediate action
        - High - Breaking changes or important features needed
        - Medium - Regular maintenance updates
        - Low - Optional improvements
      default: 2
    validations:
      required: true

  - type: textarea
    id: current-dependencies
    attributes:
      label: Current Dependency Status
      description: |
        Run dependency audit commands and paste the results
      placeholder: |
        Example:
        ```
        pnpm audit
        
        found 3 vulnerabilities (1 moderate, 2 high)
        
        High severity:
        - axios: Vulnerable to SSRF attacks (update to 1.4.0+)
        - express: Information disclosure vulnerability
        
        pnpm outdated
        
        Package     Current  Wanted   Latest
        @types/node  18.15.0  18.17.0  20.5.0
        typescript    4.9.0    4.9.5    5.1.6
        nx           16.1.0   16.8.0   16.8.1
        ```
    validations:
      required: false

  - type: textarea
    id: specific-packages
    attributes:
      label: Specific Packages to Update
      description: |
        List specific packages that need updates (if known)
      placeholder: |
        Example:
        - @nx/* packages to latest stable version
        - TypeScript to version 5.x
        - React to version 18.x
        - Node.js types to match runtime version
        - Testing libraries (Vitest, Playwright)
        - Security-related packages with known vulnerabilities
    validations:
      required: false

  - type: checkboxes
    id: update-categories
    attributes:
      label: Dependency Categories
      description: Which types of dependencies need updates? (Check all that apply)
      options:
        - label: Framework dependencies (React, Express, Nx)
          required: false
        - label: TypeScript and type definitions
          required: false
        - label: Testing frameworks and tools
          required: false
        - label: Build and development tools
          required: false
        - label: Security-related packages
          required: false
        - label: UI/Component libraries
          required: false
        - label: Database and ORM packages
          required: false
        - label: Utility and helper libraries
          required: false

  - type: textarea
    id: breaking-changes-analysis
    attributes:
      label: Breaking Changes Analysis
      description: |
        Research and document potential breaking changes
      placeholder: |
        Example:
        - TypeScript 5.0 removes support for Node.js 14
        - React 18 changes behavior of automatic batching
        - Express 5.0 has changes to middleware error handling
        - Vitest 1.0+ requires Node.js 18+ minimum
        - Nx 16 changes to project configuration format
    validations:
      required: false

  - type: textarea
    id: test-commands
    attributes:
      label: Dependency Management Commands
      description: Commands for managing dependencies
      value: |
        **Audit & Analysis:**
        - `pnpm audit` - Check for security vulnerabilities
        - `pnpm outdated` - Show outdated packages
        - `pnpm audit --fix` - Auto-fix vulnerabilities where possible
        - `pnpm update` - Update all packages within semver range
        
        **Specific Updates:**
        - `pnpm add package@latest` - Update specific package
        - `pnpm add -D @types/node@latest` - Update dev dependencies
        - `pnpm nx migrate latest` - Update Nx workspace
        
        **Validation:**
        - `pnpm install` - Verify lock file integrity
        - `pnpm build` - Ensure builds work after updates
        - `pnpm test` - Run tests to catch breaking changes
        - `pnpm lint` - Check for code style issues
        
        **Lock File Management:**
        - `pnpm install --frozen-lockfile` - Use exact lock file versions
        - `rm pnpm-lock.yaml && pnpm install` - Regenerate lock file
      render: markdown
    validations:
      required: false

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Acceptance Criteria
      description: What needs to be accomplished for successful dependency updates?
      value: |
        ## Acceptance Criteria
        
        ### Security & Vulnerabilities
        - [ ] All security vulnerabilities resolved
        - [ ] Audit shows no high/critical severity issues
        - [ ] Dependencies are updated to secure versions
        
        ### Compatibility & Stability
        - [ ] All existing functionality continues to work
        - [ ] Build process completes successfully
        - [ ] All tests pass after updates
        - [ ] No runtime errors introduced
        
        ### Code Quality
        - [ ] TypeScript compilation succeeds without errors
        - [ ] Linting passes with updated rule sets
        - [ ] Code formatting remains consistent
        - [ ] No deprecated API usage warnings
        
        ### Documentation & Maintenance
        - [ ] Update any code affected by breaking changes
        - [ ] Update documentation for new features/changes
        - [ ] Commit changes with clear migration notes
        - [ ] Update CI/CD configuration if needed
        
        ### Testing & Validation
        - [ ] Unit tests pass with updated dependencies
        - [ ] E2E tests continue to work properly
        - [ ] Performance benchmarks are maintained
        - [ ] Cross-browser compatibility preserved (if applicable)
      render: markdown
    validations:
      required: false

  - type: checkboxes
    id: update-strategy
    attributes:
      label: Update Strategy
      description: How should the dependency updates be approached?
      options:
        - label: Incremental updates (one major package at a time)
          required: false
        - label: Batch updates for related packages
          required: false
        - label: Security patches first, then feature updates
          required: true
        - label: Test thoroughly after each major update
          required: true
        - label: Create backup branch before major changes
          required: false
        - label: Update documentation alongside code changes
          required: true

  - type: textarea
    id: rollback-plan
    attributes:
      label: Rollback Plan
      description: |
        What's the plan if updates cause issues?
      placeholder: |
        - Create backup branch before starting updates
        - Document current working versions
        - Have rollback commands ready
        - Test in development environment first
        - Monitor CI/CD pipeline for failures
    validations:
      required: false

  - type: textarea
    id: commit-message-guidelines
    attributes:
      label: "‚ö†Ô∏è CRITICAL: Commit Message Guidelines"
      description: "**IMPORTANT**: Following these rules is mandatory - commits will FAIL if not followed!"
      value: |
        ## ‚ö†Ô∏è MANDATORY Commit Message Format
        
        **üö® FAILURE TO FOLLOW THESE RULES WILL CAUSE COMMIT FAILURES! üö®**
        
        **Format:** `type(scope): subject`
        
        **Example:** `build: update dependencies to resolve security vulnerabilities`
        
        **Available Types:**
        - `build` - Build system or dependency changes (primary for dependency updates)
        - `fix` - A bug fix (if updating to fix security issues)
        - `feat` - A new feature (if dependencies add new capabilities)
        - `perf` - Performance improvements (if updates improve performance)
        - `refactor` - Code changes needed for dependency compatibility
        - `test` - Test updates needed for new dependency versions
        - `ci` - CI configuration changes for new dependencies
        - `chore` - Other maintenance changes
        - `docs` - Documentation updates for dependency changes
        
        **Scope Rules:**
        **Scope Rules (REQUIRED):**
        - Use kebab-case (lowercase with hyphens)
        - Examples: `deps`, `nx`, `typescript`, `react`, `security`
        - Can omit scope for global dependency updates
        
        **Subject Rules (REQUIRED):**
        - Start with lowercase letter or number
        - No period at the end
        - Header length limits vary by scope:
          - `starter-api-e2e`, `starter-pwa-e2e`, `application-core`: max 90 characters
          - `domain-core`: max 85 characters  
          - `starter-api`, `starter-pwa`: max 83 characters
          - `utils-core`: max 80 characters
          - All other scopes: max 72 characters
        - Be descriptive about what was updated
        
        **Reference:** See `commitlint.config.ts` and `.husky/commit-msg` for complete rules
        
        **‚ö†Ô∏è Your commits will be automatically rejected if they don't follow these rules!**
      render: markdown
    validations:
      required: false
