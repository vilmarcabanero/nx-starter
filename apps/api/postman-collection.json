{
  "info": {
    "name": "Task App API",
    "description": "Complete API collection for the Task App Express.js server with Clean Architecture. This collection includes comprehensive test scenarios for both authentication (user registration) and todos with happy paths, validation errors, and edge cases.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4000",
      "type": "string",
      "description": "Base URL for the Task App API server"
    },
    {
      "key": "todoId",
      "value": "",
      "type": "string",
      "description": "Dynamic todo ID from create operations"
    },
    {
      "key": "registeredUserId",
      "value": "",
      "type": "string",
      "description": "Dynamic user ID from register operations"
    },
    {
      "key": "testEmail",
      "value": "",
      "type": "string",
      "description": "Dynamic test email for registration tests"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string",
      "description": "JWT token from login operations"
    },
    {
      "key": "loginTestEmail",
      "value": "login.test@example.com",
      "type": "string",
      "description": "Fixed email for login testing"
    },
    {
      "key": "loginTestPassword",
      "value": "LoginTest123",
      "type": "string",
      "description": "Fixed password for login testing"
    }
  ],
  "item": [
    {
      "name": "Server Info & Health",
      "description": "Basic server information and health check endpoints",
      "item": [
        {
          "name": "Get Server Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Task App API Server');",
                  "    pm.expect(responseJson).to.have.property('version', '1.0.0');",
                  "    pm.expect(responseJson).to.have.property('environment', 'development');",
                  "    pm.expect(responseJson).to.have.property('database');",
                  "    pm.expect(responseJson.database).to.be.oneOf(['mysql', 'memory', 'sqlite', 'postgres']);",
                  "    pm.expect(responseJson).to.have.property('endpoints');",
                  "});",
                  "",
                  "pm.test('Endpoints object has required endpoints', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.endpoints).to.have.property('health', '/api/health');",
                  "    pm.expect(responseJson.endpoints).to.have.property('todos', '/api/todos');",
                  "    pm.expect(responseJson.endpoints).to.have.property('documentation');",
                  "    // Auth endpoints might be present",
                  "    if (responseJson.endpoints.auth) {",
                  "        pm.expect(responseJson.endpoints.auth).to.be.a('string');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"]
            },
            "description": "Get basic server information including version, environment, and available endpoints"
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Server is running');",
                  "    pm.expect(responseJson).to.have.property('timestamp');",
                  "});",
                  "",
                  "pm.test('Timestamp is valid ISO string', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Health check endpoint to verify server is running"
          }
        }
      ]
    },
    {
      "name": "Authentication",
      "description": "User authentication operations including registration and login with comprehensive validation scenarios",
      "item": [
        {
          "name": "Register User - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created user has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('firstName', 'Test');",
                  "    pm.expect(user).to.have.property('lastName', 'User');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('createdAt');",
                  "    pm.expect(user.email).to.include('@example.com');",
                  "});",
                  "",
                  "pm.test('User ID is generated and stored as variable', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user.id).to.be.a('string');",
                  "    pm.expect(user.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('registeredUserId', user.id);",
                  "    pm.collectionVariables.set('testEmail', user.email);",
                  "});",
                  "",
                  "pm.test('Username is generated from email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user.username).to.be.a('string');",
                  "    pm.expect(user.username).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('CreatedAt timestamp is valid ISO string', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test.user.{{$randomInt}}@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user with all required fields and valid data"
          }
        },
        {
          "name": "Register User - Missing First Name (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details have correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details).to.have.property('message');",
                  "    pm.expect(responseJson.details).to.have.property('issues');",
                  "    pm.expect(responseJson.details).to.have.property('fieldErrors');",
                  "    pm.expect(responseJson.details.issues).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Error details indicate firstName is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const firstNameError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('firstName'));",
                  "    pm.expect(firstNameError).to.exist;",
                  "    pm.expect(firstNameError.message).to.include('expected string, received undefined');",
                  "    pm.expect(firstNameError.code).to.equal('invalid_type');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('firstName');",
                  "    pm.expect(responseJson.details.fieldErrors.firstName).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.firstName[0]).to.include('expected string, received undefined');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when firstName is missing"
          }
        },
        {
          "name": "Register User - Missing Last Name (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate lastName is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const lastNameError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('lastName'));",
                  "    pm.expect(lastNameError).to.exist;",
                  "    pm.expect(lastNameError.message).to.include('expected string, received undefined');",
                  "    pm.expect(lastNameError.code).to.equal('invalid_type');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('lastName');",
                  "    pm.expect(responseJson.details.fieldErrors.lastName).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.lastName[0]).to.include('expected string, received undefined');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when lastName is missing"
          }
        },
        {
          "name": "Register User - Missing Email (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate email is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const emailError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('email'));",
                  "    pm.expect(emailError).to.exist;",
                  "    pm.expect(emailError.message).to.include('expected string, received undefined');",
                  "    pm.expect(emailError.code).to.equal('invalid_type');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('email');",
                  "    pm.expect(responseJson.details.fieldErrors.email).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.email[0]).to.include('expected string, received undefined');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when email is missing"
          }
        },
        {
          "name": "Register User - Missing Password (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate password is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const passwordError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('password'));",
                  "    pm.expect(passwordError).to.exist;",
                  "    pm.expect(passwordError.message).to.include('expected string, received undefined');",
                  "    pm.expect(passwordError.code).to.equal('invalid_type');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('password');",
                  "    pm.expect(responseJson.details.fieldErrors.password).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.password[0]).to.include('expected string, received undefined');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when password is missing"
          }
        },
        {
          "name": "Register User - Invalid Email Format (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate invalid email format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const emailError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('email'));",
                  "    pm.expect(emailError).to.exist;",
                  "    pm.expect(emailError.message).to.equal('Please provide a valid email address');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('email');",
                  "    pm.expect(responseJson.details.fieldErrors.email).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.email).to.include('Please provide a valid email address');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"invalid-email-format\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when email format is invalid"
          }
        },
        {
          "name": "Register User - Weak Password (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate weak password', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const passwordError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('password'));",
                  "    pm.expect(passwordError).to.exist;",
                  "    pm.expect(passwordError.message).to.equal('Password must be at least 8 characters long with at least one uppercase letter, one lowercase letter, and one number');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('password');",
                  "    pm.expect(responseJson.details.fieldErrors.password).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.password).to.include('Password must be at least 8 characters long with at least one uppercase letter, one lowercase letter, and one number');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when password is too weak (doesn't meet complexity requirements)"
          }
        },
        {
          "name": "Register User - Invalid Name Format (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate invalid name format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const nameError = responseJson.details.issues.find(issue => ",
                  "        (issue.path && issue.path.includes('firstName')) || (issue.path && issue.path.includes('lastName'))",
                  "    );",
                  "    pm.expect(nameError).to.exist;",
                  "    pm.expect(nameError.message).to.equal('Names can only contain letters, spaces, and hyphens');",
                  "    ",
                  "    const hasFirstNameError = responseJson.details.fieldErrors.firstName;",
                  "    const hasLastNameError = responseJson.details.fieldErrors.lastName;",
                  "    pm.expect(hasFirstNameError || hasLastNameError).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John123\",\n  \"lastName\": \"Doe@#$\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test validation error when firstName or lastName contains invalid characters (numbers, special characters)"
          }
        },
        {
          "name": "Register User - Multiple Validation Errors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details contain multiple validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.at.least(3);",
                  "    ",
                  "    // Check for firstName error",
                  "    const firstNameError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('firstName'));",
                  "    pm.expect(firstNameError).to.exist;",
                  "    ",
                  "    // Check for email error",
                  "    const emailError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('email'));",
                  "    pm.expect(emailError).to.exist;",
                  "    ",
                  "    // Check for password error",
                  "    const passwordError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('password'));",
                  "    pm.expect(passwordError).to.exist;",
                  "    ",
                  "    // Verify fieldErrors structure",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('firstName');",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('email');",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('password');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"lastName\": \"Doe\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test multiple validation errors at once (missing firstName, invalid email, weak password)"
          }
        },
        {
          "name": "Register User for Login Testing - Setup",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created user has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('firstName', 'Login');",
                  "    pm.expect(user).to.have.property('lastName', 'Test');",
                  "    pm.expect(user).to.have.property('email', pm.collectionVariables.get('loginTestEmail'));",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('User ID is generated and stored for login tests', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data;",
                  "    pm.expect(user.id).to.be.a('string');",
                  "    pm.expect(user.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('loginTestUserId', user.id);",
                  "    pm.collectionVariables.set('loginTestUsername', user.username);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Login\",\n  \"lastName\": \"Test\",\n  \"email\": \"{{loginTestEmail}}\",\n  \"password\": \"{{loginTestPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a test user specifically for login testing scenarios"
          }
        },
        {
          "name": "Login User - Happy Path (Email)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Login response has authentication data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const data = responseJson.data;",
                  "    pm.expect(data).to.have.property('token');",
                  "    pm.expect(data).to.have.property('user');",
                  "    pm.expect(data.token).to.be.a('string');",
                  "    pm.expect(data.token).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('User data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data.user;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('firstName', 'Login');",
                  "    pm.expect(user).to.have.property('lastName', 'Test');",
                  "    pm.expect(user).to.have.property('email', pm.collectionVariables.get('loginTestEmail'));",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('JWT token is valid format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    // JWT tokens have 3 parts separated by dots",
                  "    const tokenParts = token.split('.');",
                  "    pm.expect(tokenParts).to.have.length(3);",
                  "    pm.expect(tokenParts[0]).to.have.length.above(0);",
                  "    pm.expect(tokenParts[1]).to.have.length.above(0);",
                  "    pm.expect(tokenParts[2]).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('Store auth token for future use', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    pm.collectionVariables.set('authToken', token);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginTestEmail}}\",\n  \"password\": \"{{loginTestPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with valid email and password - should return JWT token and user data"
          }
        },
        {
          "name": "Login User - Happy Path (Username)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Login response has authentication data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const data = responseJson.data;",
                  "    pm.expect(data).to.have.property('token');",
                  "    pm.expect(data).to.have.property('user');",
                  "    pm.expect(data.token).to.be.a('string');",
                  "    pm.expect(data.token).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('User data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data.user;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('firstName', 'Login');",
                  "    pm.expect(user).to.have.property('lastName', 'Test');",
                  "    pm.expect(user).to.have.property('email', pm.collectionVariables.get('loginTestEmail'));",
                  "    pm.expect(user).to.have.property('username');",
                  "});",
                  "",
                  "pm.test('JWT token is valid format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    const tokenParts = token.split('.');",
                  "    pm.expect(tokenParts).to.have.length(3);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{loginTestUsername}}\",\n  \"password\": \"{{loginTestPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with valid username and password - should return JWT token and user data"
          }
        },
        {
          "name": "Login User - Missing Email/Username (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details have correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details).to.have.property('message');",
                  "    pm.expect(responseJson.details).to.have.property('issues');",
                  "    pm.expect(responseJson.details).to.have.property('fieldErrors');",
                  "    pm.expect(responseJson.details.issues).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Error details indicate credential requirement', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    // Should have validation error for missing credentials",
                  "    const hasEmailOrUsernameError = responseJson.details.issues.some(issue => ",
                  "        (issue.path && (issue.path.includes('email') || issue.path.includes('username'))) ||",
                  "        issue.message.toLowerCase().includes('email') ||",
                  "        issue.message.toLowerCase().includes('username') ||",
                  "        issue.message.toLowerCase().includes('credential')",
                  "    );",
                  "    pm.expect(hasEmailOrUsernameError).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test validation error when both email and username are missing"
          }
        },
        {
          "name": "Login User - Missing Password (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate password is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const passwordError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('password'));",
                  "    pm.expect(passwordError).to.exist;",
                  "    pm.expect(passwordError.message).to.include('expected string, received undefined');",
                  "    pm.expect(passwordError.code).to.equal('invalid_type');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('password');",
                  "    pm.expect(responseJson.details.fieldErrors.password).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.password[0]).to.include('expected string, received undefined');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test validation error when password is missing"
          }
        },
        {
          "name": "Login User - Invalid Email (Authentication Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates invalid credentials', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('invalid') || ",
                  "        msg.includes('credentials') ||",
                  "        msg.includes('email') ||",
                  "        msg.includes('password') ||",
                  "        msg.includes('authentication') ||",
                  "        msg.includes('unauthorized')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test authentication error when email does not exist"
          }
        },
        {
          "name": "Login User - Invalid Password (Authentication Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates invalid credentials', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('invalid') || ",
                  "        msg.includes('credentials') ||",
                  "        msg.includes('password') ||",
                  "        msg.includes('authentication') ||",
                  "        msg.includes('unauthorized')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginTestEmail}}\",\n  \"password\": \"WrongPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test authentication error when password is incorrect"
          }
        },
        {
          "name": "Login User - Invalid Username (Authentication Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code');",
                  "});",
                  "",
                  "pm.test('Error indicates invalid credentials', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const errorMessage = responseJson.error.toLowerCase();",
                  "    pm.expect(errorMessage).to.satisfy(msg => ",
                  "        msg.includes('invalid') || ",
                  "        msg.includes('credentials') ||",
                  "        msg.includes('username') ||",
                  "        msg.includes('authentication') ||",
                  "        msg.includes('unauthorized')",
                  "    );",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistent_username\",\n  \"password\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test authentication error when username does not exist"
          }
        },
        {
          "name": "Login User - Empty Credentials (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details contain multiple validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    // Should have validation errors for empty strings",
                  "    const hasEmptyStringErrors = responseJson.details.issues.some(issue => ",
                  "        issue.message && (issue.message.includes('empty') || issue.message.includes('required'))",
                  "    );",
                  "    pm.expect(hasEmptyStringErrors).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"\",\n  \"password\": \"\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test validation error when credentials are empty strings"
          }
        },
        {
          "name": "Login User - Invalid Email Format (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details indicate invalid email format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const emailError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('email'));",
                  "    pm.expect(emailError).to.exist;",
                  "    pm.expect(emailError.message).to.equal('Please provide a valid email address');",
                  "    ",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('email');",
                  "    pm.expect(responseJson.details.fieldErrors.email).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.email).to.include('Please provide a valid email address');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email-format\",\n  \"password\": \"SomePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test validation error when email format is invalid"
          }
        },
        {
          "name": "Login User - Multiple Validation Errors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details contain multiple validation errors', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.at.least(1);",
                  "    ",
                  "    // Check for validation errors (missing both credentials and password)",
                  "    const hasCredentialError = responseJson.details.issues.some(issue => ",
                  "        (issue.path && (issue.path.includes('email') || issue.path.includes('username'))) ||",
                  "        issue.message.toLowerCase().includes('credential')",
                  "    );",
                  "    ",
                  "    const hasPasswordError = responseJson.details.issues.some(issue => ",
                  "        (issue.path && issue.path.includes('password')) ||",
                  "        issue.message.toLowerCase().includes('password')",
                  "    );",
                  "    ",
                  "    pm.expect(hasCredentialError || hasPasswordError).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Test multiple validation errors when all required fields are missing"
          }
        },
        {
          "name": "Register User - Duplicate Email (409 Conflict)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 409', function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'This email address is already registered');",
                  "    pm.expect(responseJson).to.have.property('code', 'REG_EMAIL_EXISTS');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Duplicate\",\n  \"lastName\": \"Test\",\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Test error handling when attempting to register with an email that already exists (uses email from successful registration)"
          }
        }
      ]
    },
    {
      "name": "Authentication Flow & Token Validation",
      "description": "JWT token validation and authentication flow tests",
      "item": [
        {
          "name": "Validate JWT Token - Get Server Info with Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Server responds normally with valid token', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Task App API Server');",
                  "});",
                  "",
                  "pm.test('Auth token is preserved in variable', function () {",
                  "    const authToken = pm.collectionVariables.get('authToken');",
                  "    pm.expect(authToken).to.be.a('string');",
                  "    pm.expect(authToken).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "description": "JWT token from login"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"]
            },
            "description": "Test that authenticated requests work properly with JWT token"
          }
        },
        {
          "name": "Invalid JWT Token - Malformed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code indicates authentication error', function () {",
                  "    // Should be 401 for invalid token, or 200 if endpoint doesn't require auth",
                  "    pm.expect([200, 401, 403]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer invalid.jwt.token",
                "description": "Malformed JWT token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"]
            },
            "description": "Test behavior with malformed JWT token"
          }
        },
        {
          "name": "Missing Authorization Header",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 for public endpoint', function () {",
                  "    // Server info should be public, so should return 200",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Public endpoint works without authentication', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Task App API Server');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"]
            },
            "description": "Test public endpoint access without authentication"
          }
        },
        {
          "name": "JWT Token Structure Validation",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Auth token exists in collection variables', function () {",
                  "    const authToken = pm.collectionVariables.get('authToken');",
                  "    pm.expect(authToken).to.be.a('string');",
                  "    pm.expect(authToken).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('JWT token has valid structure', function () {",
                  "    const authToken = pm.collectionVariables.get('authToken');",
                  "    const tokenParts = authToken.split('.');",
                  "    pm.expect(tokenParts).to.have.length(3);",
                  "    ",
                  "    // Header should be base64 encoded JSON",
                  "    pm.expect(tokenParts[0]).to.have.length.above(0);",
                  "    ",
                  "    // Payload should be base64 encoded JSON",
                  "    pm.expect(tokenParts[1]).to.have.length.above(0);",
                  "    ",
                  "    // Signature should exist",
                  "    pm.expect(tokenParts[2]).to.have.length.above(0);",
                  "});",
                  "",
                  "pm.test('JWT payload contains expected claims', function () {",
                  "    const authToken = pm.collectionVariables.get('authToken');",
                  "    const tokenParts = authToken.split('.');",
                  "    ",
                  "    try {",
                  "        const payload = JSON.parse(atob(tokenParts[1]));",
                  "        ",
                  "        // Common JWT claims",
                  "        pm.expect(payload).to.be.an('object');",
                  "        ",
                  "        // Should have expiration",
                  "        if (payload.exp) {",
                  "            pm.expect(payload.exp).to.be.a('number');",
                  "            pm.expect(payload.exp).to.be.above(Math.floor(Date.now() / 1000));",
                  "        }",
                  "        ",
                  "        // Should have issued at",
                  "        if (payload.iat) {",
                  "            pm.expect(payload.iat).to.be.a('number');",
                  "            pm.expect(payload.iat).to.be.at.most(Math.floor(Date.now() / 1000));",
                  "        }",
                  "        ",
                  "        console.log('JWT Payload:', payload);",
                  "    } catch (e) {",
                  "        pm.test.skip('JWT payload is not standard base64 encoded JSON');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            },
            "description": "Validate the structure and content of the JWT token obtained from login"
          }
        }
      ]
    },
    {
      "name": "Todos - Create Operations",
      "description": "POST operations for creating new todos with validation scenarios",
      "item": [
        {
          "name": "Create Todo - Happy Path",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Created todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title', 'Complete project documentation');",
                  "    pm.expect(todo).to.have.property('completed', false);",
                  "    pm.expect(todo).to.have.property('priority', 'high');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Todo ID is generated and stored', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.id).to.be.a('string');",
                  "    pm.expect(todo.id).to.have.length.above(0);",
                  "    pm.collectionVariables.set('todoId', todo.id);",
                  "});",
                  "",
                  "pm.test('Timestamps are valid ISO strings', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "    pm.expect(todo.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"priority\": \"high\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Create a new todo with required fields"
          }
        },
        {
          "name": "Create Todo - Missing Title (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details have correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details).to.have.property('message');",
                  "    pm.expect(responseJson.details).to.have.property('issues');",
                  "    pm.expect(responseJson.details).to.have.property('fieldErrors');",
                  "    pm.expect(responseJson.details.issues).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Error details indicate title is required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const titleError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('title'));",
                  "    pm.expect(titleError).to.exist;",
                  "    pm.expect(titleError.code).to.equal('invalid_type');",
                  "    pm.expect(titleError.message).to.include('expected string, received undefined');",
                  "    ",
                  "    // Test fieldErrors structure",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('title');",
                  "    pm.expect(responseJson.details.fieldErrors.title).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.title.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test validation error when title is missing"
          }
        },
        {
          "name": "Create Todo - Title Too Short (Validation Error)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error', 'Validation failed');",
                  "    pm.expect(responseJson).to.have.property('code', 'VALIDATION_ERROR');",
                  "    pm.expect(responseJson).to.have.property('details');",
                  "});",
                  "",
                  "pm.test('Error details have correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details).to.have.property('message');",
                  "    pm.expect(responseJson.details).to.have.property('issues');",
                  "    pm.expect(responseJson.details).to.have.property('fieldErrors');",
                  "    pm.expect(responseJson.details.issues).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Error details indicate title too short', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.details.issues.length).to.be.above(0);",
                  "    ",
                  "    const titleError = responseJson.details.issues.find(issue => issue.path && issue.path.includes('title'));",
                  "    pm.expect(titleError).to.exist;",
                  "    pm.expect(titleError.code).to.equal('too_small');",
                  "    pm.expect(titleError.message).to.equal('Title must be at least 2 characters');",
                  "    ",
                  "    // Test fieldErrors structure",
                  "    pm.expect(responseJson.details.fieldErrors).to.have.property('title');",
                  "    pm.expect(responseJson.details.fieldErrors.title).to.be.an('array');",
                  "    pm.expect(responseJson.details.fieldErrors.title[0]).to.equal('Title must be at least 2 characters');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"x\",\n  \"priority\": \"medium\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test validation error when title is too short (less than 2 characters)"
          }
        }
      ]
    },
    {
      "name": "Todos - Read Operations",
      "description": "GET operations for retrieving todos with various filters",
      "item": [
        {
          "name": "Get All Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Todo items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const todo = responseJson.data[0];",
                  "        pm.expect(todo).to.have.property('id');",
                  "        pm.expect(todo).to.have.property('title');",
                  "        pm.expect(todo).to.have.property('completed');",
                  "        pm.expect(todo).to.have.property('priority');",
                  "        pm.expect(todo).to.have.property('createdAt');",
                  "        pm.expect(todo).to.have.property('updatedAt');",
                  "        pm.expect(todo.completed).to.be.a('boolean');",
                  "        pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Retrieve all todos regardless of completion status"
          }
        },
        {
          "name": "Get Todo by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Todo has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const todo = responseJson.data;",
                  "    pm.expect(todo).to.have.property('id');",
                  "    pm.expect(todo).to.have.property('title');",
                  "    pm.expect(todo).to.have.property('completed');",
                  "    pm.expect(todo).to.have.property('priority');",
                  "    pm.expect(todo).to.have.property('createdAt');",
                  "    pm.expect(todo).to.have.property('updatedAt');",
                  "    pm.expect(todo.completed).to.be.a('boolean');",
                  "    pm.expect(todo.priority).to.be.oneOf(['low', 'medium', 'high']);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Retrieve a specific todo by its ID (uses todoId from Create Todo request)"
          }
        },
        {
          "name": "Get Todo by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'TODO_NOT_FOUND');",
                  "});",
                  "",
                  "pm.test('Error message indicates todo not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.include('not found');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/nonexistent-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "nonexistent-id"]
            },
            "description": "Test error handling when requesting a todo that doesn't exist"
          }
        },
        {
          "name": "Get Active Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are active (not completed)', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.false;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "active"]
            },
            "description": "Retrieve only active (not completed) todos"
          }
        },
        {
          "name": "Get Completed Todos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('All todos are completed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.data.forEach(function(todo) {",
                  "        pm.expect(todo.completed).to.be.true;",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/completed",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "completed"]
            },
            "description": "Retrieve only completed todos"
          }
        },
        {
          "name": "Get Todo Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "});",
                  "",
                  "pm.test('Statistics data has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats).to.have.property('total');",
                  "    pm.expect(stats).to.have.property('active');",
                  "    pm.expect(stats).to.have.property('completed');",
                  "    pm.expect(stats).to.have.property('overdue');",
                  "    pm.expect(stats).to.have.property('highPriority');",
                  "    pm.expect(stats.total).to.be.a('number');",
                  "    pm.expect(stats.active).to.be.a('number');",
                  "    pm.expect(stats.completed).to.be.a('number');",
                  "    pm.expect(stats.overdue).to.be.a('number');",
                  "    pm.expect(stats.highPriority).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('Statistics are mathematically consistent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const stats = responseJson.data;",
                  "    pm.expect(stats.total).to.equal(stats.active + stats.completed);",
                  "    pm.expect(stats.active).to.be.at.least(0);",
                  "    pm.expect(stats.completed).to.be.at.least(0);",
                  "    pm.expect(stats.overdue).to.be.at.least(0);",
                  "    pm.expect(stats.highPriority).to.be.at.least(0);",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "stats"]
            },
            "description": "Get statistics about todos including total, active, completed, overdue, and high priority counts"
          }
        }
      ]
    },
    {
      "name": "Todos - Update Operations",
      "description": "PUT and PATCH operations for updating todos",
      "item": [
        {
          "name": "Update Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo updated successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated todo title\",\n  \"priority\": \"low\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Update a todo with new values"
          }
        },
        {
          "name": "Toggle Todo Completion",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo toggled successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}/toggle",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}", "toggle"]
            },
            "description": "Toggle the completion status of a todo"
          }
        },
        {
          "name": "Toggle Non-existent Todo - Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'TODO_NOT_FOUND');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/nonexistent-id/toggle",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "nonexistent-id", "toggle"]
            },
            "description": "Test error handling when toggling a non-existent todo"
          }
        }
      ]
    },
    {
      "name": "Todos - Delete Operations",
      "description": "DELETE operations for removing todos",
      "item": [
        {
          "name": "Delete Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message', 'Todo deleted successfully');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "{{todoId}}"]
            },
            "description": "Delete a todo by its ID"
          }
        },
        {
          "name": "Delete Non-existent Todo - Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson).to.have.property('code', 'TODO_NOT_FOUND');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/todos/nonexistent-id",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos", "nonexistent-id"]
            },
            "description": "Test error handling when deleting a non-existent todo"
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "description": "Various error scenarios and edge cases",
      "item": [
        {
          "name": "Unknown Route - 404",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/unknown-route",
              "host": ["{{baseUrl}}"],
              "path": ["api", "unknown-route"]
            },
            "description": "Test 404 error for unknown routes"
          }
        },
        {
          "name": "Invalid JSON - 400",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has correct content type', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "});",
                  "",
                  "pm.test('Response has error structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \"title\": \"test\", invalid json }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/todos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "todos"]
            },
            "description": "Test error handling for invalid JSON in request body"
          }
        }
      ]
    }
  ]
}
