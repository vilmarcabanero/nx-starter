name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

# Allow concurrent security scans
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  PNPM_VERSION: '10.13.1'
  NODE_VERSION: '20'

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "🔍 Running npm audit..."
          pnpm audit --audit-level moderate --json > audit-results.json || true
          
          # Display human-readable results
          echo "Audit Summary:"
          pnpm audit --audit-level moderate || echo "Vulnerabilities found - check details above"

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

      - name: Check for high/critical vulnerabilities
        run: |
          HIGH_VULNS=$(pnpm audit --audit-level high --json 2>/dev/null | jq -r '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(pnpm audit --audit-level critical --json 2>/dev/null | jq -r '.metadata.vulnerabilities.critical // 0')
          
          echo "High severity vulnerabilities: $HIGH_VULNS"
          echo "Critical severity vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found! Failing the check."
            exit 1
          elif [ "$HIGH_VULNS" -gt 0 ]; then
            echo "⚠️ High severity vulnerabilities found! Consider updating dependencies."
          else
            echo "✅ No critical or high severity vulnerabilities found."
          fi

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for secret scanning

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-security-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for analysis
        run: pnpm run build:libs

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"

  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' # Skip on PRs to avoid unnecessary scans
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build test Docker image
        run: |
          # Example Dockerfile for API - create one if it doesn't exist
          cat > Dockerfile.test << EOF
          FROM node:20-alpine
          WORKDIR /app
          COPY package.json pnpm-lock.yaml ./
          RUN npm install -g pnpm@10.13.1
          RUN pnpm install --frozen-lockfile
          COPY . .
          RUN pnpm run build:prod
          EXPOSE 3000
          CMD ["node", "dist/apps/starter-api/main.js"]
          EOF
          
          docker build -f Dockerfile.test -t nx-starter-test:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'nx-starter-test:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install license checker
        run: pnpm add -D license-checker

      - name: Check licenses
        run: |
          echo "📋 Checking dependency licenses..."
          npx license-checker --summary > license-summary.txt
          npx license-checker --json > license-details.json
          
          # Display summary
          cat license-summary.txt
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"
          if npx license-checker --failOn "$PROBLEMATIC_LICENSES" > /dev/null 2>&1; then
            echo "✅ No problematic licenses found"
          else
            echo "⚠️ Potentially problematic licenses detected"
            npx license-checker --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;0BSD;Unlicense" || true
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: |
            license-summary.txt
            license-details.json
          retention-days: 30

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, secret-scanning, code-security-analysis, license-compliance]
    if: always()
    
    steps:
      - name: Create security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [ "${{ needs.dependency-audit.result }}" = "success" ]; then
            echo "✅ **Dependency Audit**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Audit**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secret-scanning.result }}" = "success" ]; then
            echo "✅ **Secret Scanning**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Secret Scanning**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.code-security-analysis.result }}" = "success" ]; then
            echo "✅ **Code Security Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Security Analysis**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.license-compliance.result }}" = "success" ]; then
            echo "✅ **License Compliance**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **License Compliance**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Scan Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **View Details**: Check individual job logs above" >> $GITHUB_STEP_SUMMARY

      - name: Notify on security issues
        if: needs.dependency-audit.result != 'success' || needs.secret-scanning.result != 'success' || needs.code-security-analysis.result != 'success'
        run: |
          echo "🚨 Security issues detected!"
          # Add notification logic here
          # Example Slack notification:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Security scan failed for repository ${{ github.repository }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}