name: 📮 Postman Test Coverage
description: Improve Postman collection and API testing coverage
title: "[API] Update Postman tests to achieve comprehensive API coverage"
labels: ["testing", "postman", "api", "coverage", "enhancement", "copilot"]
assignees: ["copilot"]
body:
  - type: dropdown
    id: scope
    attributes:
      label: Postman Testing Scope
      description: What aspect of Postman testing needs improvement?
      options:
        - Collection Update - Add new API endpoints to collection
        - Test Coverage - Add/improve Postman test scripts
        - Environment Setup - Update environment variables and configurations
        - Documentation - Improve API documentation in collection
        - All - Comprehensive Postman testing improvement
      default: 4
    validations:
      required: true

  - type: dropdown
    id: priority
    attributes:
      label: Priority
      description: How urgent is this Postman testing improvement?
      options:
        - High - Critical for API validation
        - Medium - Important for development workflow
        - Low - Nice to have improvement
      default: 1
    validations:
      required: true

  - type: textarea
    id: current-collection-status
    attributes:
      label: Current Postman Collection Status
      description: |
        What's the current state of the Postman collection and tests?
        Run Newman to check current test coverage.
      placeholder: |
        Example:
        ```
        pnpm e2e:postman
        
        Collection: Starter API Tests
        Environment: Local Development
        
        ✓ Health Check - GET /health
        ✓ Create Todo - POST /api/todos
        ✗ Update Todo - PUT /api/todos/:id (missing)
        ✗ Delete Todo - DELETE /api/todos/:id (missing)
        ✗ Error Handling Tests (missing)
        
        10 requests, 7 tests passing, 3 missing
        ```
    validations:
      required: false

  - type: textarea
    id: missing-endpoints
    attributes:
      label: Missing API Endpoints
      description: |
        Which API endpoints are missing from the Postman collection?
      placeholder: |
        **CRUD Operations:**
        - PUT /api/todos/:id - Update existing todo
        - DELETE /api/todos/:id - Delete todo
        - GET /api/todos?filter=completed - Filtered queries
        
        **Authentication:**
        - POST /api/auth/login - User login
        - POST /api/auth/register - User registration
        - POST /api/auth/refresh - Token refresh
        
        **Error Scenarios:**
        - Invalid data validation endpoints
        - Unauthorized access endpoints
        - Rate limiting endpoints
    validations:
      required: false

  - type: textarea
    id: missing-tests
    attributes:
      label: Missing Postman Test Scripts
      description: |
        Which test scenarios need to be added to existing requests?
      placeholder: |
        **Response Validation:**
        - Status code assertions
        - Response schema validation
        - Response time checks
        - Header validation
        
        **Data Validation:**
        - Created resource ID extraction
        - Response data structure tests
        - Error message validation
        - Pagination response tests
        
        **Environment Management:**
        - Dynamic variable setting from responses
        - Token extraction and storage
        - Test data cleanup scripts
    validations:
      required: false

  - type: textarea
    id: postman-test-guidance
    attributes:
      label: Postman Test Categories Guidance
      description: |
        Types of API tests the coding agent should include in the Postman collection:
      value: |
        **1. Core API Testing (Required):**
        - Happy path API endpoint testing
        - Error handling and validation testing
        - Response status code validation
        - Basic request/response structure verification

        **2. Security and Authentication (Essential):**
        - Authentication and authorization flows
        - Token validation and refresh mechanisms
        - Role-based access control testing
        - Security header validation

        **3. Data Validation (Important):**
        - Response schema validation
        - Request payload validation
        - Data type and format checking
        - Required field validation

        **4. Performance and Reliability:**
        - Performance and response time testing
        - Timeout and retry behavior
        - Load testing scenarios
        - API rate limiting validation

        **5. Business Logic Testing:**
        - Data persistence and CRUD operations
        - Edge cases and boundary testing
        - Workflow and integration scenarios
        - Business rule validation
      render: markdown
    validations:
      required: false
        - label: API versioning and compatibility
          required: false
        - label: Rate limiting and throttling
          required: false
        - label: Security testing (SQL injection, XSS)
          required: false

  - type: textarea
    id: environment-updates
    attributes:
      label: Environment Configuration Updates
      description: |
        What environment variables or configurations need to be updated?
      placeholder: |
        **Environment Variables:**
        - baseUrl: {{base_url}} - API base URL
        - authToken: {{auth_token}} - Authentication token
        - testUserId: {{test_user_id}} - Test user identifier
        
        **Configuration Updates:**
        - Update local development URLs
        - Add staging environment configuration
        - Include test data variables
        - Configure timeout settings
    validations:
      required: false

  - type: textarea
    id: test-commands
    attributes:
      label: Postman/Newman Commands Reference
      description: Relevant commands for Postman testing
      value: |
        **Run Postman Tests:**
        - `pnpm e2e:postman`
        
        **Advanced Newman Options (when running directly):**
        - `npx newman run apps/starter-api/postman-collection.json.backup -e apps/starter-api/postman-environment.json --reporters cli,html --reporter-html-export apps/starter-api/postman/report.html`
        - `npx newman run apps/starter-api/postman-collection.json -e apps/starter-api/postman-environment.json --reporters json,cli`
        
        **Newman Command Options:**
        - `--reporters cli,json,html` - Multiple output formats
        - `--reporter-html-export report.html` - Generate HTML report
        - `--timeout-request 30000` - Set request timeout (30 seconds)
        - `--delay-request 100` - Add delay between requests
        - `--iteration-count 3` - Run collection multiple times
        - `--verbose` - Detailed output for debugging
        
        **Collection Management:**
        - Export from Postman app to update collection file
        - Update environment variables in JSON file
        - Version control collection and environment files
        
        **File Locations:**
        - Collection: `apps/starter-api/postman-collection.json`
        - Backup: `apps/starter-api/postman-collection.json.backup`
        - Environment: `apps/starter-api/postman-environment.json`
      render: markdown
    validations:
      required: false

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Acceptance Criteria
      description: What needs to be accomplished to close this issue?
      value: |
        ## Acceptance Criteria
        
        ### Collection Completeness
        - [ ] All API endpoints are included in Postman collection
        - [ ] Request examples include proper headers and body data
        - [ ] Collection is organized with clear folder structure
        - [ ] API documentation is complete within collection
        
        ### Test Coverage
        - [ ] Every request has appropriate test scripts
        - [ ] Status code assertions are comprehensive
        - [ ] Response schema validation is implemented
        - [ ] Error scenarios are properly tested
        - [ ] Environment variables are utilized effectively
        
        ### Test Quality
        - [ ] Tests are reliable and consistent
        - [ ] Dynamic data handling works correctly
        - [ ] Test cleanup prevents data pollution
        - [ ] Performance benchmarks are reasonable
        
        ### Environment Management
        - [ ] Environment variables are properly configured
        - [ ] Local and staging environments are supported
        - [ ] Authentication tokens are managed correctly
        - [ ] Test data variables are maintained
        
        ### Documentation & Maintenance
        - [ ] Collection includes clear API documentation
        - [ ] Test scripts have explanatory comments
        - [ ] Environment setup instructions are documented
        - [ ] Collection versioning is maintained
        
        ### Validation
        - [ ] Newman runs successfully with all tests passing
        - [ ] Collection can be imported and run by other developers
        - [ ] CI integration works if implemented
        - [ ] Performance benchmarks are met
      render: markdown
    validations:
      required: false

  - type: textarea
    id: postman-best-practices-guidance
    attributes:
      label: Postman Testing Best Practices Guidance
      description: |
        Best practices the coding agent should follow when creating Postman tests:
      value: |
        **1. Environment and Configuration (Essential):**
        - Use environment variables for dynamic data (URLs, tokens, IDs)
        - Set up proper environment hierarchy (dev, staging, production)
        - Configure authentication variables securely
        - Use global variables for common test data

        **2. Test Script Quality (Required):**
        - Implement proper test script assertions (pm.test)
        - Use descriptive test names and clear assertions
        - Validate response status, headers, and body content
        - Add meaningful error messages for failed assertions

        **3. Collection Organization (Important):**
        - Use pre-request scripts for setup when needed
        - Organize collection with logical folder structure
        - Group related endpoints in folders
        - Use consistent naming conventions

        **4. Documentation and Maintainability:**
        - Include comprehensive API documentation
        - Add descriptions to requests and folders
        - Document required parameters and headers
        - Provide example requests and responses

        **5. Advanced Testing Features:**
        - Use test data management strategies
        - Implement response schema validation
        - Add performance and response time checks
        - Set up data-driven testing with CSV/JSON
      render: markdown
    validations:
      required: false

  - type: textarea
    id: api-endpoints-checklist
    attributes:
      label: API Endpoints Checklist
      description: |
        List of API endpoints that should be covered in the collection
      placeholder: |
        **Core CRUD Operations:**
        - [ ] GET /api/todos - List all todos
        - [ ] POST /api/todos - Create new todo
        - [ ] GET /api/todos/:id - Get specific todo
        - [ ] PUT /api/todos/:id - Update todo
        - [ ] DELETE /api/todos/:id - Delete todo
        
        **Authentication:**
        - [ ] POST /api/auth/login - User login
        - [ ] POST /api/auth/logout - User logout
        - [ ] POST /api/auth/refresh - Token refresh
        
        **Health & Status:**
        - [ ] GET /health - Health check
        - [ ] GET /api/status - API status
    validations:
      required: false

  - type: textarea
    id: additional-context
    attributes:
      label: Additional Context
      description: |
        Any additional information for Postman test implementation?
      placeholder: |
        - Specific API authentication requirements
        - Performance benchmarks to maintain
        - External services that need to be considered
        - Specific error scenarios to test
        - Integration with CI/CD pipeline requirements
        - Custom header requirements or API versioning
    validations:
      required: false

  - type: textarea
    id: commit-message-guidelines
    attributes:
      label: "⚠️ CRITICAL: Commit Message Guidelines"
      description: "**IMPORTANT**: Following these rules is mandatory - commits will FAIL if not followed!"
      value: |
        ## ⚠️ MANDATORY Commit Message Format
        
        **🚨 FAILURE TO FOLLOW THESE RULES WILL CAUSE COMMIT FAILURES! 🚨**
        
        **Format:** `type(scope): subject`
        
        **Example:** `test(starter-api): update postman collection with comprehensive api tests`
        
        **Available Types:**
        - `test` - Adding missing tests or correcting existing tests
        - `feat` - A new feature (for new API endpoints)
        - `fix` - A bug fix
        - `docs` - Documentation only changes (for API docs)
        - `refactor` - Code changes that neither fix bugs nor add features
        - `perf` - Performance improvements
        - `style` - Formatting changes
        - `build` - Build system or dependency changes
        - `ci` - CI configuration changes
        - `chore` - Other changes
        
        **Scope Rules (REQUIRED):**
        - Use kebab-case (lowercase with hyphens)
        - Examples: `starter-api`, `postman`, `api-tests`
        
        **Subject Rules (REQUIRED):**
        - Start with lowercase letter or number
        - No period at the end
        - Header length limits vary by scope:
          - `starter-api-e2e`, `starter-pwa-e2e`, `application-core`: max 90 characters
          - `domain-core`: max 85 characters  
          - `starter-api`, `starter-pwa`: max 83 characters
          - `utils-core`: max 80 characters
          - All other scopes: max 72 characters
        - Be descriptive and specific
        
        **Reference:** See `commitlint.config.ts` and `.husky/commit-msg` for complete rules
        
        **⚠️ Your commits will be automatically rejected if they don't follow these rules!**
        - Be descriptive and specific
        
        **Reference:** See `commitlint.config.ts` for complete rules
      render: markdown
    validations:
      required: false
