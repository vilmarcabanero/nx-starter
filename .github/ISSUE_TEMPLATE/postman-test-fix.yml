name: üìÆüîß Postman Test Fix
description: Fix failing Postman collection tests and API issues
title: "[starter-api] Fix failing Postman tests"
labels: ["testing", "postman", "api", "test", "high-priority", "copilot"]
assignees: ["copilot"]
body:
  - type: dropdown
    id: failure-type
    attributes:
      label: Postman Failure Type
      description: What type of Postman issues are you experiencing?
      options:
        - Collection Errors - Requests failing to execute
        - Test Script Failures - Assertion and validation errors
        - Environment Issues - Variable or configuration problems
        - Authentication Problems - Token or auth flow issues
        - Performance Issues - Timeout or slow response problems
        - All - Multiple types of failures
      default: 5
    validations:
      required: true

  - type: textarea
    id: setup-prerequisites
    attributes:
      label: "üìã Setup Prerequisites"
      description: "**IMPORTANT**: Before working on this issue, ensure you have the correct package manager setup!"
      value: |
        ## üöÄ Required Setup Steps
        
        **‚ö†Ô∏è CRITICAL**: This project uses **pnpm** as the package manager. Using npm or yarn will cause issues!
        
        ### 1. Install pnpm globally (if not already installed)
        ```bash
        npm install -g pnpm
        ```
        
        ### 2. Install project dependencies
        ```bash
        pnpm install
        ```
        
        ### 3. Verify setup by running tests
        ```bash
        # For API components
        pnpm nx test starter-api
        
        # For PWA components  
        pnpm nx test starter-pwa
        
        # For library components
        pnpm nx test domain-core
        pnpm nx test application-core
        pnpm nx test utils-core
        ```
        
        **‚úÖ You're ready to work on this issue once these commands run successfully!**
      render: markdown
    validations:
      required: false

  - type: dropdown
    id: urgency
    attributes:
      label: Urgency Level
      description: How critical are these failing Postman tests?
      options:
        - Critical - Blocking API validation and releases
        - High - Breaking development workflow
        - Medium - Intermittent failures affecting testing
        - Low - Minor test issues
      default: 0
    validations:
      required: true

  - type: textarea
    id: newman-failure-output
    attributes:
      label: Newman Test Failure Output
      description: |
        Paste the complete Newman test failure output here. 
        Run the Newman command and copy the error messages.
      placeholder: |
        Example:
        ```
        pnpm e2e:postman
        
        Starter API Tests
        
        ‚úì Health Check
        ‚úó Create Todo
          1. Expected status code to be 201 but got 500
          2. JSONError in test-script: Unexpected token 'u' at position 0
        
        ‚úó Get Todo List
          1. Request timeout: ESOCKETTIMEDOUT
          2. Test script failed: ReferenceError: response is not defined
        
        ‚úì Update Todo
        
        Iteration: 1/1
        Requests: 4, Failed: 2
        Test Scripts: 8, Failed: 3
        Assertions: 12, Failed: 3
        ```
      render: shell
    validations:
      required: false

  - type: textarea
    id: failing-requests
    attributes:
      label: Specific Failing Requests
      description: |
        List the specific Postman requests and tests that are failing
      placeholder: |
        **Collection: apps/starter-api/postman-collection.json.backup**
        
        **Failing Requests:**
        - "Create Todo" - POST /api/todos
          - Status code assertion failing (expects 201, gets 500)
          - Response parsing error in test script
        
        - "Get Todo List" - GET /api/todos
          - Request timeout after 30 seconds
          - Test script reference error
        
        - "Delete Todo" - DELETE /api/todos/{{todoId}}
          - Variable {{todoId}} not defined
          - Authentication token expired
    validations:
      required: true

  - type: textarea
    id: recent-changes
    attributes:
      label: Recent Changes
      description: |
        What recent changes might have caused these Postman test failures?
      placeholder: |
        - Updated API endpoints or response formats
        - Changed authentication mechanisms or token handling
        - Modified environment variables or configuration
        - Updated Postman collection or test scripts
        - Changed server configuration or deployment
        - Updated database schema or test data
        - Modified request/response schemas
        - Changed server URLs or deployment configuration
        - Updated Postman collection or Newman version
        - Modified test scripts or assertions
    validations:
      required: false

  - type: textarea
    id: environment-details
    attributes:
      label: Environment & Configuration Details
      description: |
        What environment or configuration issues might be affecting the tests?
      placeholder: |
        **Environment File:** apps/starter-api/postman-environment.json
        - Base URL: {{base_url}} = http://localhost:3000
        - Auth Token: {{auth_token}} = (check if expired)
        - Test User ID: {{test_user_id}} = (verify exists)
        
        **Server Status:**
        - Local API server running on correct port
        - Database connection and test data available
        - Authentication service accessible
    validations:
      required: false

  - type: textarea
    id: error-analysis
    attributes:
      label: Initial Error Analysis
      description: |
        Any initial analysis of what might be causing the Postman failures?
      placeholder: |
        - 500 status code suggests server-side error in API
        - JSON parsing error indicates malformed response
        - Timeout suggests API performance issues or server not running
        - Variable undefined indicates environment configuration problem
        - Authentication failure suggests token management issue
    validations:
      required: false

  - type: textarea
    id: debug-commands
    attributes:
      label: Newman Debug Commands Reference
      description: Commands for debugging Postman test failures
      value: |
        **Basic Newman Execution:**
        ```bash
        pnpm e2e:postman
        ```
        
        **Advanced Newman Options (when running directly):**
        ```bash
        npx newman run apps/starter-api/postman-collection.json.backup -e apps/starter-api/postman-environment.json --reporters cli,html --reporter-html-export apps/starter-api/postman/report.html
        ```
        
        **Debug Options:**
        - `--verbose` - Detailed output including request/response data
        - `--reporter-cli-no-assertions` - Hide assertion details for cleaner output  
        - `--reporter-cli-no-summary` - Hide summary for focus on errors
        - `--timeout-request 60000` - Increase timeout to 60 seconds
        - `--delay-request 500` - Add 500ms delay between requests
        
        **Output Formats:**
        - `--reporters json,cli --reporter-json-export results.json` - Export detailed JSON
        - `--reporters html,cli --reporter-html-export report.html` - Generate HTML report
        
        **Debugging Specific Issues:**
        - Check environment variables: Review `apps/starter-api/postman-environment.json`
        - Validate collection: Import into Postman app for visual debugging
        - Test individual requests: Run single requests to isolate failures
        - Check API server: Verify `pnpm start:api` is running successfully
        
        **File Management:**
        - Main collection: `apps/starter-api/postman-collection.json`
        - Backup collection: `apps/starter-api/postman-collection.json.backup`
        - Environment: `apps/starter-api/postman-environment.json`
      render: markdown
    validations:
      required: false

  - type: textarea
    id: acceptance-criteria
    attributes:
      label: Acceptance Criteria
      description: What needs to be accomplished to close this issue?
      value: |
        ## Acceptance Criteria
        
        ### Request Execution
        - [ ] All Postman requests execute successfully
        - [ ] No HTTP connection or timeout errors
        - [ ] Proper status codes returned from API endpoints
        - [ ] Response data is valid and parseable
        
        ### Test Script Resolution
        - [ ] All test script syntax errors resolved
        - [ ] Assertions pass with correct expected values
        - [ ] Environment variables are properly defined and used
        - [ ] Dynamic variable extraction works correctly
        
        ### Environment Configuration
        - [ ] Environment variables point to correct endpoints
        - [ ] Authentication tokens are valid and properly managed
        - [ ] Test data variables are correctly configured
        - [ ] Different environments (local, staging) work properly
        
        ### Collection Organization
        - [ ] Collection structure is logical and maintainable
        - [ ] Request dependencies are properly managed
        - [ ] Pre-request scripts execute without errors
        - [ ] Collection documentation is accurate
        
        ### Performance & Reliability
        - [ ] Response times meet acceptable benchmarks
        - [ ] Tests run consistently without flaky failures
        - [ ] Error handling scenarios work as expected
        - [ ] Collection can be run multiple times reliably
        
        ### Validation
        - [ ] Newman runs successfully with all tests passing
        - [ ] Collection works in both Postman app and Newman CLI
        - [ ] No regressions in previously working requests
        - [ ] Integration with development workflow is smooth
      render: markdown
    validations:
      required: false

  - type: textarea
    id: debugging-guidance
    attributes:
      label: Postman Debugging Guidance for Coding Agent
      description: |
        Systematic approach the coding agent should follow to fix Postman tests:
      value: |
        **1. Infrastructure Validation (Critical):**
        - Verify API server is running and accessible
        - Check network connectivity and firewall settings
        - Validate API base URL and endpoint availability
        - Test API health check endpoints first

        **2. Configuration Analysis (Essential):**
        - Check environment variable configuration
        - Verify all required variables are defined and correct
        - Validate authentication tokens and credentials
        - Review environment variable scope and inheritance

        **3. Request Validation (Important):**
        - Test individual requests in Postman app
        - Review and validate test script syntax
        - Check request headers, body data, and parameters
        - Validate pre-request script execution

        **4. Response Analysis (Critical):**
        - Check API response formats and schemas
        - Verify response status codes and headers
        - Validate response data structure and content
        - Analyze error responses and status messages

        **5. Authentication & Security:**
        - Verify authentication token validity and expiration
        - Check authorization headers and bearer tokens
        - Validate API key configuration
        - Review authentication flow and refresh mechanisms
      render: markdown
    validations:
      required: false

  - type: textarea
    id: collection-backup-strategy
    attributes:
      label: Collection Backup & Version Management
      description: |
        How should collection changes be managed and backed up?
      placeholder: |
        - Create backup before making changes
        - Document changes made to collection
        - Version control collection and environment files
        - Test changes in development before updating main collection
        - Consider using collection.json vs collection.json.backup naming
    validations:
      required: false

  - type: textarea
    id: additional-context
    attributes:
      label: Additional Context
      description: |
        Any additional information that would be helpful for debugging these Postman failures?
      placeholder: |
        - Tests were working before specific API changes
        - Failures only occur in specific environments
        - Intermittent failures vs consistent failures
        - Related to specific API features or endpoints
        - Performance degradation observed
        - Authentication or authorization changes
        - Database or test data issues
    validations:
      required: false

  - type: textarea
    id: commit-message-guidelines
    attributes:
      label: "‚ö†Ô∏è CRITICAL: Commit Message Guidelines"
      description: "**IMPORTANT**: Following these rules is mandatory - commits will FAIL if not followed!"
      value: |
        ## ‚ö†Ô∏è MANDATORY Commit Message Format
        
        **üö® FAILURE TO FOLLOW THESE RULES WILL CAUSE COMMIT FAILURES! üö®**
        
        **Format:** `type(scope): subject`
        
        **Example:** `fix(starter-api): resolve authentication issues in postman tests`
        
        **Available Types:**
        - `fix` - A bug fix (for fixing failing Postman tests)
        - `test` - Adding missing tests or correcting existing tests
        - `refactor` - Code changes that neither fix bugs nor add features
        - `feat` - A new feature  
        - `docs` - Documentation only changes
        - `perf` - Performance improvements
        - `style` - Formatting changes
        - `build` - Build system or dependency changes
        - `ci` - CI configuration changes
        - `chore` - Other changes
        
        **Scope Rules (REQUIRED):**
        - Use kebab-case (lowercase with hyphens)
        - Examples: `starter-api`, `starter-pwa`, `domain-core`, `application-core`, `utils-core`
        
        **Subject Rules (REQUIRED):**
        - Start with lowercase letter or number
        - No period at the end
        - Header length limits vary by scope:
          - `starter-api-e2e`, `starter-pwa-e2e`, `application-core`: max 100 characters
          - `domain-core`: max 95 characters  
          - `starter-api`, `starter-pwa`: max 93 characters
          - `utils-core`: max 90 characters
          - All other scopes: max 82 characters
        - Be descriptive and specific
        
        **Reference:** See `commitlint.config.ts` and `.husky/commit-msg` for complete rules
        
        **‚ö†Ô∏è Your commits will be automatically rejected if they don't follow these rules!**
      render: markdown
    validations:
      required: false

  - type: textarea
    id: api-validation-guidance
    attributes:
      label: API & Integration Validation Guidance
      description: |
        Quality standards the coding agent should ensure when fixing Postman tests:
      value: |
        **1. Status Code Validation (Required):**
        - API endpoints return expected status codes
        - Success responses use 2xx codes appropriately
        - Error responses use 4xx/5xx codes correctly
        - Status codes match API documentation

        **2. Data Schema Validation (Essential):**
        - Response data matches expected schema
        - Required fields are present in responses
        - Data types match specification
        - Nested objects and arrays are properly structured

        **3. Authentication Testing (Critical):**
        - Authentication flows work correctly
        - Token-based authentication validates properly
        - Authorization headers are correctly formatted
        - Session management works as expected

        **4. Error Handling Validation (Important):**
        - Error scenarios are properly handled
        - Error responses include meaningful messages
        - Validation errors are properly formatted
        - Edge cases return appropriate responses

        **5. Performance Standards (Monitoring):**
        - Performance benchmarks are maintained
        - Response times stay within acceptable limits
        - API throughput meets requirements
        - No significant performance degradation
      render: markdown
    validations:
      required: false
